// Code generated by Thrift Compiler (0.14.0). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	"github.com/apache/thrift/lib/go/thrift"
	"apache/aurora"
)

var _ = aurora.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  Response setQuota(string ownerRole, ResourceAggregate quota)")
  fmt.Fprintln(os.Stderr, "  Response forceTaskState(string taskId, ScheduleStatus status)")
  fmt.Fprintln(os.Stderr, "  Response performBackup()")
  fmt.Fprintln(os.Stderr, "  Response listBackups()")
  fmt.Fprintln(os.Stderr, "  Response stageRecovery(string backupId)")
  fmt.Fprintln(os.Stderr, "  Response queryRecovery(TaskQuery query)")
  fmt.Fprintln(os.Stderr, "  Response deleteRecoveryTasks(TaskQuery query)")
  fmt.Fprintln(os.Stderr, "  Response commitRecovery()")
  fmt.Fprintln(os.Stderr, "  Response unloadRecovery()")
  fmt.Fprintln(os.Stderr, "  Response startMaintenance(Hosts hosts)")
  fmt.Fprintln(os.Stderr, "  Response drainHosts(Hosts hosts)")
  fmt.Fprintln(os.Stderr, "  Response maintenanceStatus(Hosts hosts)")
  fmt.Fprintln(os.Stderr, "  Response endMaintenance(Hosts hosts)")
  fmt.Fprintln(os.Stderr, "  Response slaDrainHosts(Hosts hosts, SlaPolicy defaultSlaPolicy, i64 timeoutSecs)")
  fmt.Fprintln(os.Stderr, "  Response snapshot()")
  fmt.Fprintln(os.Stderr, "  Response triggerExplicitTaskReconciliation(ExplicitReconciliationSettings settings)")
  fmt.Fprintln(os.Stderr, "  Response triggerImplicitTaskReconciliation()")
  fmt.Fprintln(os.Stderr, "  Response pruneTasks(TaskQuery query)")
  fmt.Fprintln(os.Stderr, "  Response createJob(JobConfiguration description)")
  fmt.Fprintln(os.Stderr, "  Response scheduleCronJob(JobConfiguration description)")
  fmt.Fprintln(os.Stderr, "  Response descheduleCronJob(JobKey job)")
  fmt.Fprintln(os.Stderr, "  Response startCronJob(JobKey job)")
  fmt.Fprintln(os.Stderr, "  Response restartShards(JobKey job,  shardIds)")
  fmt.Fprintln(os.Stderr, "  Response killTasks(JobKey job,  instances, string message)")
  fmt.Fprintln(os.Stderr, "  Response addInstances(InstanceKey key, i32 count)")
  fmt.Fprintln(os.Stderr, "  Response replaceCronTemplate(JobConfiguration config)")
  fmt.Fprintln(os.Stderr, "  Response startJobUpdate(JobUpdateRequest request, string message)")
  fmt.Fprintln(os.Stderr, "  Response pauseJobUpdate(JobUpdateKey key, string message)")
  fmt.Fprintln(os.Stderr, "  Response resumeJobUpdate(JobUpdateKey key, string message)")
  fmt.Fprintln(os.Stderr, "  Response abortJobUpdate(JobUpdateKey key, string message)")
  fmt.Fprintln(os.Stderr, "  Response rollbackJobUpdate(JobUpdateKey key, string message)")
  fmt.Fprintln(os.Stderr, "  Response pulseJobUpdate(JobUpdateKey key)")
  fmt.Fprintln(os.Stderr, "  Response getRoleSummary()")
  fmt.Fprintln(os.Stderr, "  Response getJobSummary(string role)")
  fmt.Fprintln(os.Stderr, "  Response getTasksStatus(TaskQuery query)")
  fmt.Fprintln(os.Stderr, "  Response getTasksWithoutConfigs(TaskQuery query)")
  fmt.Fprintln(os.Stderr, "  Response getPendingReason(TaskQuery query)")
  fmt.Fprintln(os.Stderr, "  Response getConfigSummary(JobKey job)")
  fmt.Fprintln(os.Stderr, "  Response getJobs(string ownerRole)")
  fmt.Fprintln(os.Stderr, "  Response getQuota(string ownerRole)")
  fmt.Fprintln(os.Stderr, "  Response populateJobConfig(JobConfiguration description)")
  fmt.Fprintln(os.Stderr, "  Response getJobUpdateSummaries(JobUpdateQuery jobUpdateQuery)")
  fmt.Fprintln(os.Stderr, "  Response getJobUpdateDetails(JobUpdateQuery query)")
  fmt.Fprintln(os.Stderr, "  Response getJobUpdateDiff(JobUpdateRequest request)")
  fmt.Fprintln(os.Stderr, "  Response getTierConfigs()")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := aurora.NewAuroraAdminClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "setQuota":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SetQuota requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg405 := flag.Arg(2)
    mbTrans406 := thrift.NewTMemoryBufferLen(len(arg405))
    defer mbTrans406.Close()
    _, err407 := mbTrans406.WriteString(arg405)
    if err407 != nil {
      Usage()
      return
    }
    factory408 := thrift.NewTJSONProtocolFactory()
    jsProt409 := factory408.GetProtocol(mbTrans406)
    argvalue1 := aurora.NewResourceAggregate()
    err410 := argvalue1.Read(context.Background(), jsProt409)
    if err410 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SetQuota(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "forceTaskState":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ForceTaskState requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := aurora.ScheduleStatus(tmp1)
    value1 := argvalue1
    fmt.Print(client.ForceTaskState(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "performBackup":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "PerformBackup requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.PerformBackup(context.Background()))
    fmt.Print("\n")
    break
  case "listBackups":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ListBackups requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ListBackups(context.Background()))
    fmt.Print("\n")
    break
  case "stageRecovery":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "StageRecovery requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.StageRecovery(context.Background(), value0))
    fmt.Print("\n")
    break
  case "queryRecovery":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "QueryRecovery requires 1 args")
      flag.Usage()
    }
    arg413 := flag.Arg(1)
    mbTrans414 := thrift.NewTMemoryBufferLen(len(arg413))
    defer mbTrans414.Close()
    _, err415 := mbTrans414.WriteString(arg413)
    if err415 != nil {
      Usage()
      return
    }
    factory416 := thrift.NewTJSONProtocolFactory()
    jsProt417 := factory416.GetProtocol(mbTrans414)
    argvalue0 := aurora.NewTaskQuery()
    err418 := argvalue0.Read(context.Background(), jsProt417)
    if err418 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.QueryRecovery(context.Background(), value0))
    fmt.Print("\n")
    break
  case "deleteRecoveryTasks":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DeleteRecoveryTasks requires 1 args")
      flag.Usage()
    }
    arg419 := flag.Arg(1)
    mbTrans420 := thrift.NewTMemoryBufferLen(len(arg419))
    defer mbTrans420.Close()
    _, err421 := mbTrans420.WriteString(arg419)
    if err421 != nil {
      Usage()
      return
    }
    factory422 := thrift.NewTJSONProtocolFactory()
    jsProt423 := factory422.GetProtocol(mbTrans420)
    argvalue0 := aurora.NewTaskQuery()
    err424 := argvalue0.Read(context.Background(), jsProt423)
    if err424 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DeleteRecoveryTasks(context.Background(), value0))
    fmt.Print("\n")
    break
  case "commitRecovery":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "CommitRecovery requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.CommitRecovery(context.Background()))
    fmt.Print("\n")
    break
  case "unloadRecovery":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "UnloadRecovery requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.UnloadRecovery(context.Background()))
    fmt.Print("\n")
    break
  case "startMaintenance":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "StartMaintenance requires 1 args")
      flag.Usage()
    }
    arg425 := flag.Arg(1)
    mbTrans426 := thrift.NewTMemoryBufferLen(len(arg425))
    defer mbTrans426.Close()
    _, err427 := mbTrans426.WriteString(arg425)
    if err427 != nil {
      Usage()
      return
    }
    factory428 := thrift.NewTJSONProtocolFactory()
    jsProt429 := factory428.GetProtocol(mbTrans426)
    argvalue0 := aurora.NewHosts()
    err430 := argvalue0.Read(context.Background(), jsProt429)
    if err430 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.StartMaintenance(context.Background(), value0))
    fmt.Print("\n")
    break
  case "drainHosts":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DrainHosts requires 1 args")
      flag.Usage()
    }
    arg431 := flag.Arg(1)
    mbTrans432 := thrift.NewTMemoryBufferLen(len(arg431))
    defer mbTrans432.Close()
    _, err433 := mbTrans432.WriteString(arg431)
    if err433 != nil {
      Usage()
      return
    }
    factory434 := thrift.NewTJSONProtocolFactory()
    jsProt435 := factory434.GetProtocol(mbTrans432)
    argvalue0 := aurora.NewHosts()
    err436 := argvalue0.Read(context.Background(), jsProt435)
    if err436 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DrainHosts(context.Background(), value0))
    fmt.Print("\n")
    break
  case "maintenanceStatus":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "MaintenanceStatus requires 1 args")
      flag.Usage()
    }
    arg437 := flag.Arg(1)
    mbTrans438 := thrift.NewTMemoryBufferLen(len(arg437))
    defer mbTrans438.Close()
    _, err439 := mbTrans438.WriteString(arg437)
    if err439 != nil {
      Usage()
      return
    }
    factory440 := thrift.NewTJSONProtocolFactory()
    jsProt441 := factory440.GetProtocol(mbTrans438)
    argvalue0 := aurora.NewHosts()
    err442 := argvalue0.Read(context.Background(), jsProt441)
    if err442 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.MaintenanceStatus(context.Background(), value0))
    fmt.Print("\n")
    break
  case "endMaintenance":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "EndMaintenance requires 1 args")
      flag.Usage()
    }
    arg443 := flag.Arg(1)
    mbTrans444 := thrift.NewTMemoryBufferLen(len(arg443))
    defer mbTrans444.Close()
    _, err445 := mbTrans444.WriteString(arg443)
    if err445 != nil {
      Usage()
      return
    }
    factory446 := thrift.NewTJSONProtocolFactory()
    jsProt447 := factory446.GetProtocol(mbTrans444)
    argvalue0 := aurora.NewHosts()
    err448 := argvalue0.Read(context.Background(), jsProt447)
    if err448 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.EndMaintenance(context.Background(), value0))
    fmt.Print("\n")
    break
  case "slaDrainHosts":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SlaDrainHosts requires 3 args")
      flag.Usage()
    }
    arg449 := flag.Arg(1)
    mbTrans450 := thrift.NewTMemoryBufferLen(len(arg449))
    defer mbTrans450.Close()
    _, err451 := mbTrans450.WriteString(arg449)
    if err451 != nil {
      Usage()
      return
    }
    factory452 := thrift.NewTJSONProtocolFactory()
    jsProt453 := factory452.GetProtocol(mbTrans450)
    argvalue0 := aurora.NewHosts()
    err454 := argvalue0.Read(context.Background(), jsProt453)
    if err454 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg455 := flag.Arg(2)
    mbTrans456 := thrift.NewTMemoryBufferLen(len(arg455))
    defer mbTrans456.Close()
    _, err457 := mbTrans456.WriteString(arg455)
    if err457 != nil {
      Usage()
      return
    }
    factory458 := thrift.NewTJSONProtocolFactory()
    jsProt459 := factory458.GetProtocol(mbTrans456)
    argvalue1 := aurora.NewSlaPolicy()
    err460 := argvalue1.Read(context.Background(), jsProt459)
    if err460 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err461 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err461 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.SlaDrainHosts(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "snapshot":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "Snapshot requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.Snapshot(context.Background()))
    fmt.Print("\n")
    break
  case "triggerExplicitTaskReconciliation":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "TriggerExplicitTaskReconciliation requires 1 args")
      flag.Usage()
    }
    arg462 := flag.Arg(1)
    mbTrans463 := thrift.NewTMemoryBufferLen(len(arg462))
    defer mbTrans463.Close()
    _, err464 := mbTrans463.WriteString(arg462)
    if err464 != nil {
      Usage()
      return
    }
    factory465 := thrift.NewTJSONProtocolFactory()
    jsProt466 := factory465.GetProtocol(mbTrans463)
    argvalue0 := aurora.NewExplicitReconciliationSettings()
    err467 := argvalue0.Read(context.Background(), jsProt466)
    if err467 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.TriggerExplicitTaskReconciliation(context.Background(), value0))
    fmt.Print("\n")
    break
  case "triggerImplicitTaskReconciliation":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "TriggerImplicitTaskReconciliation requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.TriggerImplicitTaskReconciliation(context.Background()))
    fmt.Print("\n")
    break
  case "pruneTasks":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PruneTasks requires 1 args")
      flag.Usage()
    }
    arg468 := flag.Arg(1)
    mbTrans469 := thrift.NewTMemoryBufferLen(len(arg468))
    defer mbTrans469.Close()
    _, err470 := mbTrans469.WriteString(arg468)
    if err470 != nil {
      Usage()
      return
    }
    factory471 := thrift.NewTJSONProtocolFactory()
    jsProt472 := factory471.GetProtocol(mbTrans469)
    argvalue0 := aurora.NewTaskQuery()
    err473 := argvalue0.Read(context.Background(), jsProt472)
    if err473 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.PruneTasks(context.Background(), value0))
    fmt.Print("\n")
    break
  case "createJob":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateJob requires 1 args")
      flag.Usage()
    }
    arg474 := flag.Arg(1)
    mbTrans475 := thrift.NewTMemoryBufferLen(len(arg474))
    defer mbTrans475.Close()
    _, err476 := mbTrans475.WriteString(arg474)
    if err476 != nil {
      Usage()
      return
    }
    factory477 := thrift.NewTJSONProtocolFactory()
    jsProt478 := factory477.GetProtocol(mbTrans475)
    argvalue0 := aurora.NewJobConfiguration()
    err479 := argvalue0.Read(context.Background(), jsProt478)
    if err479 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateJob(context.Background(), value0))
    fmt.Print("\n")
    break
  case "scheduleCronJob":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ScheduleCronJob requires 1 args")
      flag.Usage()
    }
    arg480 := flag.Arg(1)
    mbTrans481 := thrift.NewTMemoryBufferLen(len(arg480))
    defer mbTrans481.Close()
    _, err482 := mbTrans481.WriteString(arg480)
    if err482 != nil {
      Usage()
      return
    }
    factory483 := thrift.NewTJSONProtocolFactory()
    jsProt484 := factory483.GetProtocol(mbTrans481)
    argvalue0 := aurora.NewJobConfiguration()
    err485 := argvalue0.Read(context.Background(), jsProt484)
    if err485 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ScheduleCronJob(context.Background(), value0))
    fmt.Print("\n")
    break
  case "descheduleCronJob":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DescheduleCronJob requires 1 args")
      flag.Usage()
    }
    arg486 := flag.Arg(1)
    mbTrans487 := thrift.NewTMemoryBufferLen(len(arg486))
    defer mbTrans487.Close()
    _, err488 := mbTrans487.WriteString(arg486)
    if err488 != nil {
      Usage()
      return
    }
    factory489 := thrift.NewTJSONProtocolFactory()
    jsProt490 := factory489.GetProtocol(mbTrans487)
    argvalue0 := aurora.NewJobKey()
    err491 := argvalue0.Read(context.Background(), jsProt490)
    if err491 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DescheduleCronJob(context.Background(), value0))
    fmt.Print("\n")
    break
  case "startCronJob":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "StartCronJob requires 1 args")
      flag.Usage()
    }
    arg492 := flag.Arg(1)
    mbTrans493 := thrift.NewTMemoryBufferLen(len(arg492))
    defer mbTrans493.Close()
    _, err494 := mbTrans493.WriteString(arg492)
    if err494 != nil {
      Usage()
      return
    }
    factory495 := thrift.NewTJSONProtocolFactory()
    jsProt496 := factory495.GetProtocol(mbTrans493)
    argvalue0 := aurora.NewJobKey()
    err497 := argvalue0.Read(context.Background(), jsProt496)
    if err497 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.StartCronJob(context.Background(), value0))
    fmt.Print("\n")
    break
  case "restartShards":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RestartShards requires 2 args")
      flag.Usage()
    }
    arg498 := flag.Arg(1)
    mbTrans499 := thrift.NewTMemoryBufferLen(len(arg498))
    defer mbTrans499.Close()
    _, err500 := mbTrans499.WriteString(arg498)
    if err500 != nil {
      Usage()
      return
    }
    factory501 := thrift.NewTJSONProtocolFactory()
    jsProt502 := factory501.GetProtocol(mbTrans499)
    argvalue0 := aurora.NewJobKey()
    err503 := argvalue0.Read(context.Background(), jsProt502)
    if err503 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg504 := flag.Arg(2)
    mbTrans505 := thrift.NewTMemoryBufferLen(len(arg504))
    defer mbTrans505.Close()
    _, err506 := mbTrans505.WriteString(arg504)
    if err506 != nil { 
      Usage()
      return
    }
    factory507 := thrift.NewTJSONProtocolFactory()
    jsProt508 := factory507.GetProtocol(mbTrans505)
    containerStruct1 := aurora.NewAuroraSchedulerManagerRestartShardsArgs()
    err509 := containerStruct1.ReadField2(context.Background(), jsProt508)
    if err509 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.ShardIds
    value1 := argvalue1
    fmt.Print(client.RestartShards(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "killTasks":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "KillTasks requires 3 args")
      flag.Usage()
    }
    arg510 := flag.Arg(1)
    mbTrans511 := thrift.NewTMemoryBufferLen(len(arg510))
    defer mbTrans511.Close()
    _, err512 := mbTrans511.WriteString(arg510)
    if err512 != nil {
      Usage()
      return
    }
    factory513 := thrift.NewTJSONProtocolFactory()
    jsProt514 := factory513.GetProtocol(mbTrans511)
    argvalue0 := aurora.NewJobKey()
    err515 := argvalue0.Read(context.Background(), jsProt514)
    if err515 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg516 := flag.Arg(2)
    mbTrans517 := thrift.NewTMemoryBufferLen(len(arg516))
    defer mbTrans517.Close()
    _, err518 := mbTrans517.WriteString(arg516)
    if err518 != nil { 
      Usage()
      return
    }
    factory519 := thrift.NewTJSONProtocolFactory()
    jsProt520 := factory519.GetProtocol(mbTrans517)
    containerStruct1 := aurora.NewAuroraSchedulerManagerKillTasksArgs()
    err521 := containerStruct1.ReadField2(context.Background(), jsProt520)
    if err521 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Instances
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.KillTasks(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "addInstances":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AddInstances requires 2 args")
      flag.Usage()
    }
    arg523 := flag.Arg(1)
    mbTrans524 := thrift.NewTMemoryBufferLen(len(arg523))
    defer mbTrans524.Close()
    _, err525 := mbTrans524.WriteString(arg523)
    if err525 != nil {
      Usage()
      return
    }
    factory526 := thrift.NewTJSONProtocolFactory()
    jsProt527 := factory526.GetProtocol(mbTrans524)
    argvalue0 := aurora.NewInstanceKey()
    err528 := argvalue0.Read(context.Background(), jsProt527)
    if err528 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err529 := (strconv.Atoi(flag.Arg(2)))
    if err529 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.AddInstances(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "replaceCronTemplate":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ReplaceCronTemplate requires 1 args")
      flag.Usage()
    }
    arg530 := flag.Arg(1)
    mbTrans531 := thrift.NewTMemoryBufferLen(len(arg530))
    defer mbTrans531.Close()
    _, err532 := mbTrans531.WriteString(arg530)
    if err532 != nil {
      Usage()
      return
    }
    factory533 := thrift.NewTJSONProtocolFactory()
    jsProt534 := factory533.GetProtocol(mbTrans531)
    argvalue0 := aurora.NewJobConfiguration()
    err535 := argvalue0.Read(context.Background(), jsProt534)
    if err535 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ReplaceCronTemplate(context.Background(), value0))
    fmt.Print("\n")
    break
  case "startJobUpdate":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "StartJobUpdate requires 2 args")
      flag.Usage()
    }
    arg536 := flag.Arg(1)
    mbTrans537 := thrift.NewTMemoryBufferLen(len(arg536))
    defer mbTrans537.Close()
    _, err538 := mbTrans537.WriteString(arg536)
    if err538 != nil {
      Usage()
      return
    }
    factory539 := thrift.NewTJSONProtocolFactory()
    jsProt540 := factory539.GetProtocol(mbTrans537)
    argvalue0 := aurora.NewJobUpdateRequest()
    err541 := argvalue0.Read(context.Background(), jsProt540)
    if err541 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.StartJobUpdate(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "pauseJobUpdate":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "PauseJobUpdate requires 2 args")
      flag.Usage()
    }
    arg543 := flag.Arg(1)
    mbTrans544 := thrift.NewTMemoryBufferLen(len(arg543))
    defer mbTrans544.Close()
    _, err545 := mbTrans544.WriteString(arg543)
    if err545 != nil {
      Usage()
      return
    }
    factory546 := thrift.NewTJSONProtocolFactory()
    jsProt547 := factory546.GetProtocol(mbTrans544)
    argvalue0 := aurora.NewJobUpdateKey()
    err548 := argvalue0.Read(context.Background(), jsProt547)
    if err548 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.PauseJobUpdate(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "resumeJobUpdate":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ResumeJobUpdate requires 2 args")
      flag.Usage()
    }
    arg550 := flag.Arg(1)
    mbTrans551 := thrift.NewTMemoryBufferLen(len(arg550))
    defer mbTrans551.Close()
    _, err552 := mbTrans551.WriteString(arg550)
    if err552 != nil {
      Usage()
      return
    }
    factory553 := thrift.NewTJSONProtocolFactory()
    jsProt554 := factory553.GetProtocol(mbTrans551)
    argvalue0 := aurora.NewJobUpdateKey()
    err555 := argvalue0.Read(context.Background(), jsProt554)
    if err555 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.ResumeJobUpdate(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "abortJobUpdate":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AbortJobUpdate requires 2 args")
      flag.Usage()
    }
    arg557 := flag.Arg(1)
    mbTrans558 := thrift.NewTMemoryBufferLen(len(arg557))
    defer mbTrans558.Close()
    _, err559 := mbTrans558.WriteString(arg557)
    if err559 != nil {
      Usage()
      return
    }
    factory560 := thrift.NewTJSONProtocolFactory()
    jsProt561 := factory560.GetProtocol(mbTrans558)
    argvalue0 := aurora.NewJobUpdateKey()
    err562 := argvalue0.Read(context.Background(), jsProt561)
    if err562 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.AbortJobUpdate(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "rollbackJobUpdate":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RollbackJobUpdate requires 2 args")
      flag.Usage()
    }
    arg564 := flag.Arg(1)
    mbTrans565 := thrift.NewTMemoryBufferLen(len(arg564))
    defer mbTrans565.Close()
    _, err566 := mbTrans565.WriteString(arg564)
    if err566 != nil {
      Usage()
      return
    }
    factory567 := thrift.NewTJSONProtocolFactory()
    jsProt568 := factory567.GetProtocol(mbTrans565)
    argvalue0 := aurora.NewJobUpdateKey()
    err569 := argvalue0.Read(context.Background(), jsProt568)
    if err569 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.RollbackJobUpdate(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "pulseJobUpdate":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PulseJobUpdate requires 1 args")
      flag.Usage()
    }
    arg571 := flag.Arg(1)
    mbTrans572 := thrift.NewTMemoryBufferLen(len(arg571))
    defer mbTrans572.Close()
    _, err573 := mbTrans572.WriteString(arg571)
    if err573 != nil {
      Usage()
      return
    }
    factory574 := thrift.NewTJSONProtocolFactory()
    jsProt575 := factory574.GetProtocol(mbTrans572)
    argvalue0 := aurora.NewJobUpdateKey()
    err576 := argvalue0.Read(context.Background(), jsProt575)
    if err576 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.PulseJobUpdate(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getRoleSummary":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetRoleSummary requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetRoleSummary(context.Background()))
    fmt.Print("\n")
    break
  case "getJobSummary":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetJobSummary requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetJobSummary(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getTasksStatus":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTasksStatus requires 1 args")
      flag.Usage()
    }
    arg578 := flag.Arg(1)
    mbTrans579 := thrift.NewTMemoryBufferLen(len(arg578))
    defer mbTrans579.Close()
    _, err580 := mbTrans579.WriteString(arg578)
    if err580 != nil {
      Usage()
      return
    }
    factory581 := thrift.NewTJSONProtocolFactory()
    jsProt582 := factory581.GetProtocol(mbTrans579)
    argvalue0 := aurora.NewTaskQuery()
    err583 := argvalue0.Read(context.Background(), jsProt582)
    if err583 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetTasksStatus(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getTasksWithoutConfigs":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTasksWithoutConfigs requires 1 args")
      flag.Usage()
    }
    arg584 := flag.Arg(1)
    mbTrans585 := thrift.NewTMemoryBufferLen(len(arg584))
    defer mbTrans585.Close()
    _, err586 := mbTrans585.WriteString(arg584)
    if err586 != nil {
      Usage()
      return
    }
    factory587 := thrift.NewTJSONProtocolFactory()
    jsProt588 := factory587.GetProtocol(mbTrans585)
    argvalue0 := aurora.NewTaskQuery()
    err589 := argvalue0.Read(context.Background(), jsProt588)
    if err589 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetTasksWithoutConfigs(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getPendingReason":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetPendingReason requires 1 args")
      flag.Usage()
    }
    arg590 := flag.Arg(1)
    mbTrans591 := thrift.NewTMemoryBufferLen(len(arg590))
    defer mbTrans591.Close()
    _, err592 := mbTrans591.WriteString(arg590)
    if err592 != nil {
      Usage()
      return
    }
    factory593 := thrift.NewTJSONProtocolFactory()
    jsProt594 := factory593.GetProtocol(mbTrans591)
    argvalue0 := aurora.NewTaskQuery()
    err595 := argvalue0.Read(context.Background(), jsProt594)
    if err595 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetPendingReason(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getConfigSummary":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetConfigSummary requires 1 args")
      flag.Usage()
    }
    arg596 := flag.Arg(1)
    mbTrans597 := thrift.NewTMemoryBufferLen(len(arg596))
    defer mbTrans597.Close()
    _, err598 := mbTrans597.WriteString(arg596)
    if err598 != nil {
      Usage()
      return
    }
    factory599 := thrift.NewTJSONProtocolFactory()
    jsProt600 := factory599.GetProtocol(mbTrans597)
    argvalue0 := aurora.NewJobKey()
    err601 := argvalue0.Read(context.Background(), jsProt600)
    if err601 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetConfigSummary(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getJobs":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetJobs requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetJobs(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getQuota":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetQuota requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetQuota(context.Background(), value0))
    fmt.Print("\n")
    break
  case "populateJobConfig":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PopulateJobConfig requires 1 args")
      flag.Usage()
    }
    arg604 := flag.Arg(1)
    mbTrans605 := thrift.NewTMemoryBufferLen(len(arg604))
    defer mbTrans605.Close()
    _, err606 := mbTrans605.WriteString(arg604)
    if err606 != nil {
      Usage()
      return
    }
    factory607 := thrift.NewTJSONProtocolFactory()
    jsProt608 := factory607.GetProtocol(mbTrans605)
    argvalue0 := aurora.NewJobConfiguration()
    err609 := argvalue0.Read(context.Background(), jsProt608)
    if err609 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.PopulateJobConfig(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getJobUpdateSummaries":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetJobUpdateSummaries requires 1 args")
      flag.Usage()
    }
    arg610 := flag.Arg(1)
    mbTrans611 := thrift.NewTMemoryBufferLen(len(arg610))
    defer mbTrans611.Close()
    _, err612 := mbTrans611.WriteString(arg610)
    if err612 != nil {
      Usage()
      return
    }
    factory613 := thrift.NewTJSONProtocolFactory()
    jsProt614 := factory613.GetProtocol(mbTrans611)
    argvalue0 := aurora.NewJobUpdateQuery()
    err615 := argvalue0.Read(context.Background(), jsProt614)
    if err615 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetJobUpdateSummaries(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getJobUpdateDetails":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetJobUpdateDetails requires 1 args")
      flag.Usage()
    }
    arg616 := flag.Arg(1)
    mbTrans617 := thrift.NewTMemoryBufferLen(len(arg616))
    defer mbTrans617.Close()
    _, err618 := mbTrans617.WriteString(arg616)
    if err618 != nil {
      Usage()
      return
    }
    factory619 := thrift.NewTJSONProtocolFactory()
    jsProt620 := factory619.GetProtocol(mbTrans617)
    argvalue0 := aurora.NewJobUpdateQuery()
    err621 := argvalue0.Read(context.Background(), jsProt620)
    if err621 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetJobUpdateDetails(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getJobUpdateDiff":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetJobUpdateDiff requires 1 args")
      flag.Usage()
    }
    arg622 := flag.Arg(1)
    mbTrans623 := thrift.NewTMemoryBufferLen(len(arg622))
    defer mbTrans623.Close()
    _, err624 := mbTrans623.WriteString(arg622)
    if err624 != nil {
      Usage()
      return
    }
    factory625 := thrift.NewTJSONProtocolFactory()
    jsProt626 := factory625.GetProtocol(mbTrans623)
    argvalue0 := aurora.NewJobUpdateRequest()
    err627 := argvalue0.Read(context.Background(), jsProt626)
    if err627 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetJobUpdateDiff(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getTierConfigs":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetTierConfigs requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetTierConfigs(context.Background()))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
